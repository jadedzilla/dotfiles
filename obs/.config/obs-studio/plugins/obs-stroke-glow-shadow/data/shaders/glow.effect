uniform float4x4 ViewProj;
uniform texture2d image;
uniform texture2d glow_fill_source;
uniform float4 glow_fill_color;
uniform texture2d glow_mask;
uniform float intensity;
uniform float2 offset;

sampler_state textureSampler{
    Filter = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
    MinLOD = 0;
    MaxLOD = 0;
};

struct VertData
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData mainTransform(VertData v_in)
{
	v_in.pos = mul(float4(v_in.pos.xyz, 1.0), ViewProj);
	return v_in;
}

float4 mainImageOuterGlowColor(VertData v_in) : TARGET
{	
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);

	//float4 color = image.Sample(textureSampler, v_in.uv);

	//float3 color_l = pow(color.rgb, gamma);
	//return float4(pow(color_l, gamma_i), color.a);
	
	float4 mask_col = glow_mask.Sample(textureSampler, v_in.uv - offset);
	float4 color = image.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 glow_fill_l = pow(glow_fill_color.rgb, gamma);
	float mask_alpha = clamp(glow_fill_color.a * intensity * 2.0f * mask_col.a, 0.0f, 1.0f);
	float alpha = color.a + (1.0f - color.a) * mask_alpha;
	return float4(pow(color_rgb_l.rgb * color.a + glow_fill_l.rgb * (1.0f - color.a), gamma_i), alpha);
}

float4 mainImageOuterGlowSource(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);

	float4 color = image.Sample(textureSampler, v_in.uv);
	float4 mask_col = glow_mask.Sample(textureSampler, v_in.uv - offset);
	float4 glow_fill_col = glow_fill_source.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 glow_fill_l = pow(glow_fill_col.rgb, gamma);
	float mask_alpha = clamp(glow_fill_col.a * intensity * 2.0f * mask_col.a, 0.0f, 1.0f);
	float alpha = color.a + (1.0f - color.a) * mask_alpha;
	return float4(pow(color_rgb_l.rgb * color.a + glow_fill_l.rgb * (1.0f - color.a), gamma_i), alpha);
}

float4 mainImageInnerGlowColor(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	
	float4 mask_col = glow_mask.Sample(textureSampler, v_in.uv - offset);
	float4 color = image.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 glow_fill_l = pow(glow_fill_color.rgb, gamma);
	
	float mask_alpha = clamp(intensity * 2.0f * (1.0f - mask_col.a), 0.0f, 1.0f);
	float alpha = clamp(mask_alpha + (1.0f - mask_alpha) * color.a, 0.0f, color.a);
	return float4(pow(glow_fill_l.rgb * mask_alpha + color_rgb_l * (1.0 - mask_alpha), gamma_i), alpha);
}

float4 mainImageInnerGlowSource(VertData v_in) : TARGET
{
	float3 gamma = float3(2.2f, 2.2f, 2.2f);
	float3 gamma_i = float3(0.454545f, 0.454545f, 0.454545f);
	
	float4 mask_col = glow_mask.Sample(textureSampler, v_in.uv - offset);
	float4 color = image.Sample(textureSampler, v_in.uv);
	float4 fill_col = glow_fill_source.Sample(textureSampler, v_in.uv);
	float3 color_rgb_l = pow(color.rgb, gamma);
	float3 glow_fill_l = pow(fill_col.rgb, gamma);
	
	float mask_alpha = clamp(intensity * 2.0f * (1.0f - mask_col.a), 0.0f, 1.0f);
	float alpha = clamp(mask_alpha + (1.0f - mask_alpha) * color.a, 0.0f, color.a);
	return float4(pow(glow_fill_l.rgb * mask_alpha + color_rgb_l * (1.0 - mask_alpha), gamma_i), alpha);
}

technique FilterOuterGlowColor
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageOuterGlowColor(v_in);
	}
}

technique FilterOuterGlowSource
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageOuterGlowSource(v_in);
	}
}

technique FilterInnerGlowColor
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageInnerGlowColor(v_in);
	}
}

technique FilterInnerGlowSource
{
	pass
	{
		vertex_shader = mainTransform(v_in);
		pixel_shader = mainImageInnerGlowSource(v_in);
	}
}
